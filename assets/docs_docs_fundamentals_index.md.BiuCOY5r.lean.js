import{_ as t,c as n,a2 as s,j as a,o as e}from"./chunks/framework.Ba-TGwNR.js";const g=JSON.parse('{"title":"GSAP","description":"","frontmatter":{},"headers":[],"relativePath":"docs/docs/fundamentals/index.md","filePath":"docs/docs/fundamentals/index.md","lastUpdated":1730777569000}'),l={name:"docs/docs/fundamentals/index.md"};function h(p,i,k,d,E,o){return e(),n("div",null,i[0]||(i[0]=[s(`<h1 id="gsap" tabindex="-1">GSAP <a class="header-anchor" href="#gsap" aria-label="Permalink to &quot;GSAP&quot;">​</a></h1><p><code>gsap</code>对象是访问GSAP大部分功能的入口点。它只是一个通用对象，具有各种用于创建和控制<code>补间动画（Tweens）</code>和<code>时间轴（Timelines）</code>的方法和属性，补间动画和时间轴是需要理解的两个最重要的概念。</p><h2 id="快速概览" tabindex="-1">快速概览 <a class="header-anchor" href="#快速概览" aria-label="Permalink to &quot;快速概览&quot;">​</a></h2><p>要快速了解GSAP对象，可以查看Snorkl.tv的<code>“GSAP 3 Express”课程</code>中的这个视频——这是学习基础知识的最佳途径之一。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;video preload=&quot;none&quot; tabindex=&quot;-1&quot; style=&quot;&quot; src=&quot;blob:https://player.vimeo.com/8784fab2-cd13-476b-bbe4-570218bbc0eb&quot;&gt;&lt;/video&gt;</span></span></code></pre></div><p>要充分利用GSAP，理解补间动画和时间轴是什么至关重要：</p><h3 id="什么是补间动画" tabindex="-1">什么是补间动画？ <a class="header-anchor" href="#什么是补间动画" aria-label="Permalink to &quot;什么是补间动画？&quot;">​</a></h3><p><code>补间动画（Tween）</code>是完成所有动画工作的部分——可以把它想象成一个<strong>高性能的属性设置器</strong>。你输入目标（要动画的对象）、持续时间以及要动画的任何属性，然后当补间动画的播放头移动到新位置时，它会计算出该点的属性值应该是多少，并相应地应用它们。</p><h4 id="创建补间动画的常用方法" tabindex="-1">创建补间动画的常用方法： <a class="header-anchor" href="#创建补间动画的常用方法" aria-label="Permalink to &quot;创建补间动画的常用方法：&quot;">​</a></h4><ul><li>gsap.to()</li><li>gsap.from()</li><li>gsap.fromTo()</li></ul><p>对于简单动画（没有复杂的顺序），上述方法就足够了！例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在1秒的时间内旋转并移动类名为“box”的元素（“x”是translateX()变换的简写）。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.box&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { rotation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">27</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div>`,12),a("iframe",{height:"400",title:"GSAP Basic Tween",src:"https://codepen.io/GreenSock/embed/663f83b218082c4181ae23fd42d59cb5?default-tab=result&theme-id=41164",frameborder:"no",allowtransparency:"true",allowfullscreen:"",style:{width:"100%"}},null,-1),s(`<p>你可以使用<code>delay</code>特殊属性进行基本的顺序控制，但时间轴使排序和复杂的编排变得更加容易。</p><h3 id="什么是时间轴" tabindex="-1">什么是时间轴？ <a class="header-anchor" href="#什么是时间轴" aria-label="Permalink to &quot;什么是时间轴？&quot;">​</a></h3><p><code>时间轴（Timeline）</code>是<strong>补间动画的容器</strong>。它是终极的排序工具，能让你将动画在时间上定位到你想要的任何位置，然后可以使用<code>暂停（pause()）</code>&gt;)、<code>播放（play()）</code>&gt;)、<code>进度（progress()）</code>&gt;)、<code>倒放（reverse()）</code>&gt;)、<code>时间缩放（timeScale()）</code>&gt;)等方法轻松控制整个序列。</p><p>你可以创建任意数量的时间轴。你甚至可以<strong>嵌套它们</strong>，这对于模块化你的动画代码非常棒！每个动画（补间动画和时间轴）都被放置在一个父时间轴上（默认是<code>全局时间轴（globalTimeline）</code>&gt;))。移动时间轴的播放头会级联到其子级，使播放头保持对齐。时间轴纯粹是关于分组和协调时间/播放头的——它实际上从不设置目标的属性（补间动画处理这个）。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>                        播放头</span></span>
<span class="line"><span>|--------------时间轴-----|-----------|</span></span>
<span class="line"><span>|--补间动画1--|                |</span></span>
<span class="line"><span>           |-----补间动画2-----|-----------|</span></span></code></pre></div><h4 id="创建时间轴的方法" tabindex="-1">创建时间轴的方法： <a class="header-anchor" href="#创建时间轴的方法" aria-label="Permalink to &quot;创建时间轴的方法：&quot;">​</a></h4><ul><li><code>gsap.timeline()</code></li></ul><p>GSAP的API允许你即时控制几乎任何东西，比如播放头位置、任何子项的<code>开始时间（startTime）</code>，甚至播放/暂停/倒放时间轴或改变时间缩放本身。</p><h2 id="在时间轴中安排顺序" tabindex="-1">在时间轴中安排顺序 <a class="header-anchor" href="#在时间轴中安排顺序" aria-label="Permalink to &quot;在时间轴中安排顺序&quot;">​</a></h2><p>首先，创建一个时间轴：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>然后使用其中一个便捷方法——<code>to()</code>、<code>from()</code>或<code>fromTo()</code>添加一个补间动画：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.box&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, opacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><p>你可以根据需要多次执行此操作。注意我们是在<strong>时间轴实例上</strong>调用<code>.to()</code>（在这个例子中是变量<code>tl</code>），而不是<code>gsap</code>对象。这会创建一个补间动画并立即将其放入特定的时间轴中。另一方面，<code>gsap.to()</code>创建一个独立的补间动画。默认情况下，动画将一个接一个地顺序排列。你甚至可以使用方法链来简化代码，如下所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一个接一个地顺序排列</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.box1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注意这里没有分号！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.box2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.box3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rotation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">360</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><p><strong>注意</strong>：整个GSAP平台是面向对象的，例如，你可以使用<code>gsap.to()</code>创建单独的补间动画实例，然后使用<code>timeline.add()</code>逐个添加它们，但直接在时间轴实例上调用.to()、.from()或.fromTo()来做同样的事情步骤更少，更容易。</p>`,16),a("iframe",{height:"400",title:"GSAP Basic Tween",src:"https://codepen.io/GreenSock/embed/d0b24f699d5bee2305cb8223de580a62?default-tab=result&theme-id=41164",frameborder:"no",allowtransparency:"true",allowfullscreen:"",style:{width:"100%"}},null,-1),s(`<h2 id="使用位置参数控制放置" tabindex="-1">使用位置参数控制放置 <a class="header-anchor" href="#使用位置参数控制放置" aria-label="Permalink to &quot;使用位置参数控制放置&quot;">​</a></h2><p>通过使用可选的位置参数，可以<strong>精确地</strong>定义你希望动画在时间轴中的放置位置。数字表示绝对时间（以秒为单位），带有<code>&quot;+=&quot;</code>或<code>&quot;-=&quot;</code>前缀的字符串表示相对于时间轴末尾的偏移量。例如，<code>&quot;+=2&quot;</code>表示在时间轴末尾后2秒，会创建一个2秒的间隔。<code>&quot;-=2&quot;</code>会创建一个2秒的重叠。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从时间轴开始处精确地在1.5秒处开始：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-=0.75&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 重叠0.75秒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;+=1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在之前添加1秒的间隔</span></span></code></pre></div><h2 id="标签" tabindex="-1">标签 <a class="header-anchor" href="#标签" aria-label="Permalink to &quot;标签&quot;">​</a></h2><p>使用标签在时间轴上标记某些位置，这样你可以在这些位置放置动画或在播放期间导航到这些位置。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在正好3秒处添加一个标签</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addLabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;step2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;step2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在step2标签处开始</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;step2 += 0.75&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在step2标签后0.75秒</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 然后，我们可以使用seek()跳到该位置：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">seek</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;step2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="控制补间动画和时间轴" tabindex="-1">控制补间动画和时间轴 <a class="header-anchor" href="#控制补间动画和时间轴" aria-label="Permalink to &quot;控制补间动画和时间轴&quot;">​</a></h2><p><code>补间动画（Tween）</code>和<code>时间轴（Timeline）</code>都扩展了一个动画类，该类公开了大量有用的方法和属性。以下是一些最常用的：</p><ul><li><code>暂停（pause()）</code></li><li><code>播放（play()）</code></li><li><code>进度（progress()）</code></li><li><code>重新开始（restart()）</code></li><li><code>恢复（resume()）</code></li><li><code>倒放（reverse()）</code></li><li><code>跳转（seek()）</code></li><li><code>时间（time()）</code></li><li><code>持续时间（duration()）</code></li><li><code>时间缩放（timeScale()）</code></li><li><code>终止（kill()）</code></li></ul><p>你可以使用变量引用补间动画或时间轴实例，然后随时控制它：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只有当你稍后想控制它时才需要创建变量...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tween </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gsap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// “tl”是时间轴的简称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加动画。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 现在我们可以控制它们...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tween.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pause</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tween.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 双倍速度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">seek</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 跳到3秒处</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">progress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 到一半进度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span></code></pre></div>`,11)]))}const c=t(l,[["render",h]]);export{g as __pageData,c as default};
